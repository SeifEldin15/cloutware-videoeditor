{
  "info": {
    "_postman_id": "ffmpeg-utils-collection",
    "name": "FFmpeg Utility API",
    "description": "FFmpeg wrapper utilities for video processing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "item": [
    {
      "name": "Get Available Codecs",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/ffmpeg/codecs",
          "host": ["{{baseUrl}}"],
          "path": ["api", "ffmpeg", "codecs"]
        },
        "description": "Returns a list of available FFmpeg codecs"
      },
      "response": []
    },
    {
      "name": "Get Available Encoders",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/ffmpeg/encoders",
          "host": ["{{baseUrl}}"],
          "path": ["api", "ffmpeg", "encoders"]
        },
        "description": "Returns a list of available FFmpeg encoders"
      },
      "response": []
    },
    {
      "name": "Process Video",
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "video",
              "type": "file",
              "src": "sample-video.mp4",
              "description": "Video file to be processed"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}/api/encode",
          "host": ["{{baseUrl}}"],
          "path": ["api", "encode"]
        },
        "description": "Processes a video upload via multipart form data and returns multiple formats in a ZIP archive:\n\n- PNG thumbnail (frame at 5s)\n- 3-second GIF preview (320px width)\n- Matroska (MKV) version with original video and audio streams\n- H.265 MP4 version with AAC audio\n- info.txt with metadata\n\nSubmit the video file in a form field named 'video'."
      },
      "response": [
        {
          "name": "Success Response",
          "status": "200",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/zip"
            },
            {
              "key": "Content-Disposition",
              "value": "attachment; filename=\"video-package.zip\""
            }
          ],
          "body": "ZIP archive containing:\n1. thumbnail.png (image/png) - Single frame screenshot\n2. preview.gif (image/gif) - 3-second preview animation\n3. video.mkv (video/x-matroska) - MKV with original streams\n4. video.h265.mp4 (video/mp4) - H.265 encoded version\n5. info.txt (text/plain) - Processing metadata"
        },
        {
          "name": "Error Response",
          "status": "500",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"error\": \"Failed to process video: [error message]\"\n}"
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    }
  ],
  "exports": {
    "default": {
      "name": "ffmpeg",
      "type": "function",
      "description": "Default export providing configured fluent-ffmpeg instance",
      "usage": "import ffmpeg from '../utils/ffmpeg'"
    },
    "encoders": {
      "name": "encoders",
      "type": "Promise<string[]>",
      "description": "Returns a promise that resolves to an array of available FFmpeg encoder names",
      "usage": "import { encoders } from '../utils/ffmpeg'"
    },
    "codecs": {
      "name": "codecs", 
      "type": "Promise<string[]>",
      "description": "Returns a promise that resolves to an array of available FFmpeg codec names",
      "usage": "import { codecs } from '../utils/ffmpeg'"
    }
  },
  "configuration": {
    "ffmpegPath": {
      "description": "Automatically configures FFmpeg binary path using @ffmpeg-installer/ffmpeg",
      "type": "string"
    }
  },
  "dependencies": {
    "fluent-ffmpeg": "^2.x",
    "@ffmpeg-installer/ffmpeg": "latest",
    "zod": "latest",
    "archiver": "latest"
  },
  "examples": {
    "basic_usage": {
      "description": "Basic FFmpeg command creation",
      "code": "ffmpeg('input.mp4').output('output.mp4').run()"
    },
    "get_available_codecs": {
      "description": "Get list of available codecs",
      "code": "const availableCodecs = await codecs"
    },
    "get_available_encoders": {
      "description": "Get list of available encoders",
      "code": "const availableEncoders = await encoders"
    },
    "upload_video": {
      "description": "Process a video file via form data",
      "code": "// Using fetch with FormData\nconst formData = new FormData();\nformData.append('video', videoFile);\n\nconst response = await fetch('http://localhost:3000/api/encode', {\n  method: 'POST',\n  body: formData\n});\n\n// If successful, response will be a ZIP file\nif (response.ok) {\n  const blob = await response.blob();\n  // Process the ZIP archive...\n}"
    }
  }
}